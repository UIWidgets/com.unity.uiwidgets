using System;
using System.Collections.Generic;
using Unity.UIWidgets.foundation;
using Unity.UIWidgets.ui;

namespace Unity.UIWidgets.animation {
{% macro AnimationLazyListenerMixin(with) %} 
    public abstract class AnimationLazyListenerMixin{{with | safe}} : {{with | safe}} {
        int _listenerCounter = 0;

        protected void didRegisterListener() {
            D.assert(_listenerCounter >= 0);
            if (_listenerCounter == 0) {
                didStartListening();
            }

            _listenerCounter += 1;
        }

        protected void didUnregisterListener() {
            D.assert(_listenerCounter >= 1);
            _listenerCounter -= 1;
            if (_listenerCounter == 0) {
                didStopListening();
            }
        }

        protected abstract void didStartListening();

        protected abstract void didStopListening();

        public bool isListening {
            get { return _listenerCounter > 0; }
        }
    }
{% endmacro %}

{{ AnimationLazyListenerMixin('Animation<T>') }}

{% macro AnimationEagerListenerMixin(with) %} 
    public abstract class AnimationEagerListenerMixin{{with | safe}} : {{with | safe}} {
        protected void didRegisterListener() {
        }

        protected void didUnregisterListener() {
        }

        public virtual void dispose() {
        }
    }
{% endmacro %}

{{ AnimationEagerListenerMixin('Animation<T>') }}

{% macro AnimationLocalListenersMixin(with) %} 
    public abstract class AnimationLocalListenersMixin{{with | safe}} : {{with | safe}} {
        readonly ObserverList<VoidCallback> _listeners = new ObserverList<VoidCallback>();

        public override void addListener(VoidCallback listener) {
            didRegisterListener();
            _listeners.Add(listener);
        }

        public override void removeListener(VoidCallback listener) {
            bool removed = _listeners.Remove(listener);
            if (removed) {
                didUnregisterListener();
            }
        }

        public void notifyListeners() {
            var localListeners = new List<VoidCallback>(_listeners);
            foreach (VoidCallback listener in localListeners) {
                InformationCollector collector = null;
                D.assert(() => {
                      IEnumerable<DiagnosticsNode> infoCollector() {
                          yield return new DiagnosticsProperty<AnimationLocalListenersMixin{{with | safe}}>(
                              "The " + GetType() + " notifying listeners was",
                              this,
                              style: DiagnosticsTreeStyle.errorProperty
                          );
                      }
                      collector = infoCollector;
                      return true;
                });
                try {
                    if (_listeners.Contains(listener)) {
                        listener();
                    }
                } catch (Exception exception) {
                    UIWidgetsError.reportError(new UIWidgetsErrorDetails(
                        exception: exception,
                        library: "animation library",
                        context: new ErrorDescription("while notifying listeners for " + GetType()),
                        informationCollector: collector
                    ));
                }
            }
        }
    }
{% endmacro %}

{{ AnimationLocalListenersMixin('AnimationLazyListenerMixinAnimation<T>') }}

{{ AnimationLocalListenersMixin('AnimationEagerListenerMixinAnimation<T>') }}

{% macro AnimationLocalStatusListenersMixin(with) %} 
    public abstract class AnimationLocalStatusListenersMixin{{with | safe}} : {{with | safe}} {
        readonly ObserverList<AnimationStatusListener> _statusListeners = new ObserverList<AnimationStatusListener>();

        public override void addStatusListener(AnimationStatusListener listener) {
            didRegisterListener();
            _statusListeners.Add(listener);
        }

        public override void removeStatusListener(AnimationStatusListener listener) {
            bool removed = _statusListeners.Remove(listener);
            if (removed) {
                didUnregisterListener();
            }
        }

        public void notifyStatusListeners(AnimationStatus status) {
            var localListeners = new List<AnimationStatusListener>(_statusListeners);
            foreach (AnimationStatusListener listener in localListeners) {
                try {
                    if (_statusListeners.Contains(listener)) {
                        listener(status);
                    }
                } catch (Exception exception) {
                    InformationCollector collector = null;
                    D.assert(() => {
                        IEnumerable<DiagnosticsNode> infoCollector() {
                            yield return new DiagnosticsProperty<AnimationLocalStatusListenersMixin{{with | safe}}>(
                                "The " + GetType() + " notifying status listeners was",
                                this,
                                style: DiagnosticsTreeStyle.errorProperty
                            );
                        }
                        
                        collector = infoCollector;
                        return true;
                    });
                
                    UIWidgetsError.reportError(new UIWidgetsErrorDetails(
                        exception: exception,
                        library: "animation library",
                        context: new ErrorDescription("while notifying status listeners for " + GetType()),
                        informationCollector: collector
                    ));
                }
            }
        }
    }
{% endmacro %}

{{ AnimationLocalStatusListenersMixin('AnimationLocalListenersMixinAnimationLazyListenerMixinAnimation<T>') }}

{{ AnimationLocalStatusListenersMixin('AnimationLazyListenerMixinAnimation<T>') }}

{{ AnimationLocalStatusListenersMixin('AnimationLocalListenersMixinAnimationEagerListenerMixinAnimation<T>') }}

}