/*
    WARNING!!!: GENERATED BY CODE, DO NOT CHANGE !!!!!!
    A file with the suffix .gen.cs is automatically generate from its corresponding template file with suffix .njk using nunjucks.
    If you want to update this file, please edit the corresponding .njk file first and execute the following cmd at the Scripts folder:
    "node uiwidgets-cli.js codegen"
*/


ï»¿using Unity.UIWidgets.ui;
using Unity.UIWidgets.gestures;
using UnityEngine;

namespace Unity.UIWidgets.rendering {



    public abstract class RenderProxyBoxMixinRenderObjectWithChildMixinRenderBox<T> : RenderObjectWithChildMixinRenderBox<T> where T : RenderBox {
        public override void setupParentData(RenderObject child) {
            if (!(child.parentData is ParentData)) {
                child.parentData = new ParentData();
            }
        }


        protected internal override float computeMinIntrinsicWidth(float height) {
            if (child != null) {
                return child.getMinIntrinsicWidth(height);
            }
            return 0.0f;
        }


        protected internal override float computeMaxIntrinsicWidth(float height) {
            if (child != null) {
                return child.getMaxIntrinsicWidth(height);

            }

            return 0.0f;
        }

        protected internal override float computeMinIntrinsicHeight(float width) {
            if (child != null) {
                return child.getMinIntrinsicHeight(width);

            }

            return 0.0f;
        }


        protected internal override float computeMaxIntrinsicHeight(float width) {
            if (child != null) {
                return child.getMaxIntrinsicHeight(width);

            }
            return 0.0f;
        }

        public override float? computeDistanceToActualBaseline(TextBaseline baseline) {
            if (child != null) {
                return child.getDistanceToActualBaseline(baseline);
            }

            return base.computeDistanceToActualBaseline(baseline);
        }

        protected override void performLayout() {
            if (child != null) {
                child.layout(constraints, parentUsesSize: true);
                size = child.size;
            } else {
                performResize();
            }
        }

        protected override bool hitTestChildren(BoxHitTestResult result, Offset position = null) {
            if (child != null) {
                return child.hitTest(result, position);

            }

            return false;
        }

        public override void applyPaintTransform(RenderObject child, Matrix4 transform) {
        }

        public override void paint(PaintingContext context, Offset offset) {
            if (child != null) {
                context.paintChild(child, offset);
            }
        }
    }


    public abstract class RenderProxyBoxMixinRenderObjectWithChildMixinRenderBoxRenderStack: 
        RenderProxyBoxMixinRenderObjectWithChildMixinRenderBox<RenderStack> {
    }

}
